"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dijkstrajs";
exports.ids = ["vendor-chunks/dijkstrajs"];
exports.modules = {

/***/ "(ssr)/./node_modules/dijkstrajs/dijkstra.js":
/*!*********************************************!*\
  !*** ./node_modules/dijkstrajs/dijkstra.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/ var dijkstra = {\n    single_source_shortest_paths: function(graph, s, d) {\n        // Predecessor map for each node that has been encountered.\n        // node ID => predecessor node ID\n        var predecessors = {};\n        // Costs of shortest paths from s to all nodes encountered.\n        // node ID => cost\n        var costs = {};\n        costs[s] = 0;\n        // Costs of shortest paths from s to all nodes encountered; differs from\n        // `costs` in that it provides easy access to the node that currently has\n        // the known shortest path from s.\n        // XXX: Do we actually need both `costs` and `open`?\n        var open = dijkstra.PriorityQueue.make();\n        open.push(s, 0);\n        var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;\n        while(!open.empty()){\n            // In the nodes remaining in graph that have a known cost from s,\n            // find the node, u, that currently has the shortest path from s.\n            closest = open.pop();\n            u = closest.value;\n            cost_of_s_to_u = closest.cost;\n            // Get nodes adjacent to u...\n            adjacent_nodes = graph[u] || {};\n            // ...and explore the edges that connect u to those nodes, updating\n            // the cost of the shortest paths to any or all of those nodes as\n            // necessary. v is the node across the current edge from u.\n            for(v in adjacent_nodes){\n                if (adjacent_nodes.hasOwnProperty(v)) {\n                    // Get the cost of the edge running from u to v.\n                    cost_of_e = adjacent_nodes[v];\n                    // Cost of s to u plus the cost of u to v across e--this is *a*\n                    // cost from s to v that may or may not be less than the current\n                    // known cost to v.\n                    cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n                    // If we haven't visited v yet OR if the current known cost from s to\n                    // v is greater than the new cost we just found (cost of s to u plus\n                    // cost of u to v across e), update v's cost in the cost list and\n                    // update v's predecessor in the predecessor list (it's now u).\n                    cost_of_s_to_v = costs[v];\n                    first_visit = typeof costs[v] === \"undefined\";\n                    if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n                        costs[v] = cost_of_s_to_u_plus_cost_of_e;\n                        open.push(v, cost_of_s_to_u_plus_cost_of_e);\n                        predecessors[v] = u;\n                    }\n                }\n            }\n        }\n        if (typeof d !== \"undefined\" && typeof costs[d] === \"undefined\") {\n            var msg = [\n                \"Could not find a path from \",\n                s,\n                \" to \",\n                d,\n                \".\"\n            ].join(\"\");\n            throw new Error(msg);\n        }\n        return predecessors;\n    },\n    extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n        var nodes = [];\n        var u = d;\n        var predecessor;\n        while(u){\n            nodes.push(u);\n            predecessor = predecessors[u];\n            u = predecessors[u];\n        }\n        nodes.reverse();\n        return nodes;\n    },\n    find_path: function(graph, s, d) {\n        var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n        return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);\n    },\n    /**\n   * A very naive priority queue implementation.\n   */ PriorityQueue: {\n        make: function(opts) {\n            var T = dijkstra.PriorityQueue, t = {}, key;\n            opts = opts || {};\n            for(key in T){\n                if (T.hasOwnProperty(key)) {\n                    t[key] = T[key];\n                }\n            }\n            t.queue = [];\n            t.sorter = opts.sorter || T.default_sorter;\n            return t;\n        },\n        default_sorter: function(a, b) {\n            return a.cost - b.cost;\n        },\n        /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */ push: function(value, cost) {\n            var item = {\n                value: value,\n                cost: cost\n            };\n            this.queue.push(item);\n            this.queue.sort(this.sorter);\n        },\n        /**\n     * Return the highest priority element in the queue.\n     */ pop: function() {\n            return this.queue.shift();\n        },\n        empty: function() {\n            return this.queue.length === 0;\n        }\n    }\n};\n// node.js module exports\nif (true) {\n    module.exports = dijkstra;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dijkstrajs/dijkstra.js\n");

/***/ })

};
;