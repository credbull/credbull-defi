/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/toformat";
exports.ids = ["vendor-chunks/toformat"];
exports.modules = {

/***/ "(ssr)/./node_modules/toformat/toFormat.js":
/*!*******************************************!*\
  !*** ./node_modules/toformat/toFormat.js ***!
  \*******************************************/
/***/ ((module) => {

eval("/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */ /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */ function toFormat(Ctor) {\n    \"use strict\";\n    /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */ Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\n        if (!this.e && this.e !== 0) return this.toString(); // Infinity/NaN\n        var arr, g1, g2, i, u, nd, intd, intp, fracp, dsep, gsep, gsize, sgsize, fgsep, fgsize, tfmt = this.format || {}, cfmt = this.constructor.format || {};\n        if (dp != u) {\n            if (typeof dp == \"object\") {\n                fmt = dp;\n                dp = u;\n            } else if (rm != u) {\n                if (typeof rm == \"object\") {\n                    fmt = rm;\n                    rm = u;\n                } else if (typeof fmt != \"object\") {\n                    fmt = {};\n                }\n            } else {\n                fmt = {};\n            }\n        } else {\n            fmt = {};\n        }\n        arr = this.toFixed(dp, rm).split(\".\");\n        intp = arr[0];\n        fracp = arr[1];\n        intd = this.s < 0 ? intp.slice(1) : intp;\n        nd = intd.length;\n        dsep = fmt.decimalSeparator;\n        if (dsep == u) {\n            dsep = tfmt.decimalSeparator;\n            if (dsep == u) {\n                dsep = cfmt.decimalSeparator;\n                if (dsep == u) dsep = \".\";\n            }\n        }\n        gsep = fmt.groupSeparator;\n        if (gsep == u) {\n            gsep = tfmt.groupSeparator;\n            if (gsep == u) gsep = cfmt.groupSeparator;\n        }\n        if (gsep) {\n            gsize = fmt.groupSize;\n            if (gsize == u) {\n                gsize = tfmt.groupSize;\n                if (gsize == u) {\n                    gsize = cfmt.groupSize;\n                    if (gsize == u) gsize = 0;\n                }\n            }\n            sgsize = fmt.secondaryGroupSize;\n            if (sgsize == u) {\n                sgsize = tfmt.secondaryGroupSize;\n                if (sgsize == u) {\n                    sgsize = cfmt.secondaryGroupSize;\n                    if (sgsize == u) sgsize = 0;\n                }\n            }\n            if (sgsize) {\n                g1 = +sgsize;\n                g2 = +gsize;\n                nd -= g2;\n            } else {\n                g1 = +gsize;\n                g2 = +sgsize;\n            }\n            if (g1 > 0 && nd > 0) {\n                i = nd % g1 || g1;\n                intp = intd.substr(0, i);\n                for(; i < nd; i += g1)intp += gsep + intd.substr(i, g1);\n                if (g2 > 0) intp += gsep + intd.slice(i);\n                if (this.s < 0) intp = \"-\" + intp;\n            }\n        }\n        if (fracp) {\n            fgsep = fmt.fractionGroupSeparator;\n            if (fgsep == u) {\n                fgsep = tfmt.fractionGroupSeparator;\n                if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\n            }\n            if (fgsep) {\n                fgsize = fmt.fractionGroupSize;\n                if (fgsize == u) {\n                    fgsize = tfmt.fractionGroupSize;\n                    if (fgsize == u) {\n                        fgsize = cfmt.fractionGroupSize;\n                        if (fgsize == u) fgsize = 0;\n                    }\n                }\n                fgsize = +fgsize;\n                if (fgsize) {\n                    fracp = fracp.replace(new RegExp(\"\\\\d{\" + fgsize + \"}\\\\B\", \"g\"), \"$&\" + fgsep);\n                }\n            }\n            return intp + dsep + fracp;\n        } else {\n            return intp;\n        }\n    };\n    Ctor.format = {\n        decimalSeparator: \".\",\n        groupSeparator: \",\",\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        fractionGroupSeparator: \"\",\n        fractionGroupSize: 0\n    };\n    return Ctor;\n}\nif ( true && module.exports) module.exports = toFormat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/toformat/toFormat.js\n");

/***/ })

};
;