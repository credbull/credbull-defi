/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-query";
exports.ids = ["vendor-chunks/eth-query"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-query/index.js":
/*!*****************************************!*\
  !*** ./node_modules/eth-query/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const extend = __webpack_require__(/*! xtend */ \"(ssr)/./node_modules/xtend/immutable.js\");\nconst createRandomId = __webpack_require__(/*! json-rpc-random-id */ \"(ssr)/./node_modules/json-rpc-random-id/index.js\")();\nmodule.exports = EthQuery;\nfunction EthQuery(provider) {\n    const self = this;\n    self.currentProvider = provider;\n}\n//\n// base queries\n//\n// default block\nEthQuery.prototype.getBalance = generateFnWithDefaultBlockFor(2, \"eth_getBalance\");\nEthQuery.prototype.getCode = generateFnWithDefaultBlockFor(2, \"eth_getCode\");\nEthQuery.prototype.getTransactionCount = generateFnWithDefaultBlockFor(2, \"eth_getTransactionCount\");\nEthQuery.prototype.getStorageAt = generateFnWithDefaultBlockFor(3, \"eth_getStorageAt\");\nEthQuery.prototype.call = generateFnWithDefaultBlockFor(2, \"eth_call\");\n// standard\nEthQuery.prototype.protocolVersion = generateFnFor(\"eth_protocolVersion\");\nEthQuery.prototype.syncing = generateFnFor(\"eth_syncing\");\nEthQuery.prototype.coinbase = generateFnFor(\"eth_coinbase\");\nEthQuery.prototype.mining = generateFnFor(\"eth_mining\");\nEthQuery.prototype.hashrate = generateFnFor(\"eth_hashrate\");\nEthQuery.prototype.gasPrice = generateFnFor(\"eth_gasPrice\");\nEthQuery.prototype.accounts = generateFnFor(\"eth_accounts\");\nEthQuery.prototype.blockNumber = generateFnFor(\"eth_blockNumber\");\nEthQuery.prototype.getBlockTransactionCountByHash = generateFnFor(\"eth_getBlockTransactionCountByHash\");\nEthQuery.prototype.getBlockTransactionCountByNumber = generateFnFor(\"eth_getBlockTransactionCountByNumber\");\nEthQuery.prototype.getUncleCountByBlockHash = generateFnFor(\"eth_getUncleCountByBlockHash\");\nEthQuery.prototype.getUncleCountByBlockNumber = generateFnFor(\"eth_getUncleCountByBlockNumber\");\nEthQuery.prototype.sign = generateFnFor(\"eth_sign\");\nEthQuery.prototype.sendTransaction = generateFnFor(\"eth_sendTransaction\");\nEthQuery.prototype.sendRawTransaction = generateFnFor(\"eth_sendRawTransaction\");\nEthQuery.prototype.estimateGas = generateFnFor(\"eth_estimateGas\");\nEthQuery.prototype.getBlockByHash = generateFnFor(\"eth_getBlockByHash\");\nEthQuery.prototype.getBlockByNumber = generateFnFor(\"eth_getBlockByNumber\");\nEthQuery.prototype.getTransactionByHash = generateFnFor(\"eth_getTransactionByHash\");\nEthQuery.prototype.getTransactionByBlockHashAndIndex = generateFnFor(\"eth_getTransactionByBlockHashAndIndex\");\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor(\"eth_getTransactionByBlockNumberAndIndex\");\nEthQuery.prototype.getTransactionReceipt = generateFnFor(\"eth_getTransactionReceipt\");\nEthQuery.prototype.getUncleByBlockHashAndIndex = generateFnFor(\"eth_getUncleByBlockHashAndIndex\");\nEthQuery.prototype.getUncleByBlockNumberAndIndex = generateFnFor(\"eth_getUncleByBlockNumberAndIndex\");\nEthQuery.prototype.getCompilers = generateFnFor(\"eth_getCompilers\");\nEthQuery.prototype.compileLLL = generateFnFor(\"eth_compileLLL\");\nEthQuery.prototype.compileSolidity = generateFnFor(\"eth_compileSolidity\");\nEthQuery.prototype.compileSerpent = generateFnFor(\"eth_compileSerpent\");\nEthQuery.prototype.newFilter = generateFnFor(\"eth_newFilter\");\nEthQuery.prototype.newBlockFilter = generateFnFor(\"eth_newBlockFilter\");\nEthQuery.prototype.newPendingTransactionFilter = generateFnFor(\"eth_newPendingTransactionFilter\");\nEthQuery.prototype.uninstallFilter = generateFnFor(\"eth_uninstallFilter\");\nEthQuery.prototype.getFilterChanges = generateFnFor(\"eth_getFilterChanges\");\nEthQuery.prototype.getFilterLogs = generateFnFor(\"eth_getFilterLogs\");\nEthQuery.prototype.getLogs = generateFnFor(\"eth_getLogs\");\nEthQuery.prototype.getWork = generateFnFor(\"eth_getWork\");\nEthQuery.prototype.submitWork = generateFnFor(\"eth_submitWork\");\nEthQuery.prototype.submitHashrate = generateFnFor(\"eth_submitHashrate\");\n// network level\nEthQuery.prototype.sendAsync = function(opts, cb) {\n    const self = this;\n    self.currentProvider.sendAsync(createPayload(opts), function(err, response) {\n        if (!err && response.error) err = new Error(\"EthQuery - RPC Error - \" + response.error.message);\n        if (err) return cb(err);\n        cb(null, response.result);\n    });\n};\n// util\nfunction generateFnFor(methodName) {\n    return function() {\n        const self = this;\n        var args = [].slice.call(arguments);\n        var cb = args.pop();\n        self.sendAsync({\n            method: methodName,\n            params: args\n        }, cb);\n    };\n}\nfunction generateFnWithDefaultBlockFor(argCount, methodName) {\n    return function() {\n        const self = this;\n        var args = [].slice.call(arguments);\n        var cb = args.pop();\n        // set optional default block param\n        if (args.length < argCount) args.push(\"latest\");\n        self.sendAsync({\n            method: methodName,\n            params: args\n        }, cb);\n    };\n}\nfunction createPayload(data) {\n    return extend({\n        // defaults\n        id: createRandomId(),\n        jsonrpc: \"2.0\",\n        params: []\n    }, data);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-query/index.js\n");

/***/ })

};
;