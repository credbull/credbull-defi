"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsbi";
exports.ids = ["vendor-chunks/jsbi"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsbi/dist/jsbi.mjs":
/*!*****************************************!*\
  !*** ./node_modules/jsbi/dist/jsbi.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass JSBI extends Array {\n    constructor(i, _){\n        if (super(i), this.sign = _, i > JSBI.__kMaxLength) throw new RangeError(\"Maximum BigInt size exceeded\");\n    }\n    static BigInt(i) {\n        var _ = Math.floor, t = Number.isFinite;\n        if (\"number\" == typeof i) {\n            if (0 === i) return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(i)) return 0 > i ? JSBI.__oneDigit(-i, !0) : JSBI.__oneDigit(i, !1);\n            if (!t(i) || _(i) !== i) throw new RangeError(\"The number \" + i + \" cannot be converted to BigInt because it is not an integer\");\n            return JSBI.__fromDouble(i);\n        }\n        if (\"string\" == typeof i) {\n            const _ = JSBI.__fromString(i);\n            if (null === _) throw new SyntaxError(\"Cannot convert \" + i + \" to a BigInt\");\n            return _;\n        }\n        if (\"boolean\" == typeof i) return !0 === i ? JSBI.__oneDigit(1, !1) : JSBI.__zero();\n        if (\"object\" == typeof i) {\n            if (i.constructor === JSBI) return i;\n            const _ = JSBI.__toPrimitive(i);\n            return JSBI.BigInt(_);\n        }\n        throw new TypeError(\"Cannot convert \" + i + \" to a BigInt\");\n    }\n    toDebugString() {\n        const i = [\n            \"BigInt[\"\n        ];\n        for (const _ of this)i.push((_ ? (_ >>> 0).toString(16) : _) + \", \");\n        return i.push(\"]\"), i.join(\"\");\n    }\n    toString(i = 10) {\n        if (2 > i || 36 < i) throw new RangeError(\"toString() radix argument must be between 2 and 36\");\n        return 0 === this.length ? \"0\" : 0 == (i & i - 1) ? JSBI.__toStringBasePowerOfTwo(this, i) : JSBI.__toStringGeneric(this, i, !1);\n    }\n    static toNumber(i) {\n        const _ = i.length;\n        if (0 === _) return 0;\n        if (1 === _) {\n            const _ = i.__unsignedDigit(0);\n            return i.sign ? -_ : _;\n        }\n        const t = i.__digit(_ - 1), e = JSBI.__clz30(t), n = 30 * _ - e;\n        if (1024 < n) return i.sign ? -Infinity : 1 / 0;\n        let g = n - 1, o = t, s = _ - 1;\n        const l = e + 3;\n        let r = 32 === l ? 0 : o << l;\n        r >>>= 12;\n        const a = l - 12;\n        let u = 12 <= l ? 0 : o << 20 + l, d = 20 + l;\n        for(0 < a && 0 < s && (s--, o = i.__digit(s), r |= o >>> 30 - a, u = o << a + 2, d = a + 2); 0 < d && 0 < s;)s--, o = i.__digit(s), u |= 30 <= d ? o << d - 30 : o >>> 30 - d, d -= 30;\n        const h = JSBI.__decideRounding(i, d, s, o);\n        if ((1 === h || 0 === h && 1 == (1 & u)) && (u = u + 1 >>> 0, 0 === u && (r++, 0 != r >>> 20 && (r = 0, g++, 1023 < g)))) return i.sign ? -Infinity : 1 / 0;\n        const m = i.sign ? -2147483648 : 0;\n        return g = g + 1023 << 20, JSBI.__kBitConversionInts[1] = m | g | r, JSBI.__kBitConversionInts[0] = u, JSBI.__kBitConversionDouble[0];\n    }\n    static unaryMinus(i) {\n        if (0 === i.length) return i;\n        const _ = i.__copy();\n        return _.sign = !i.sign, _;\n    }\n    static bitwiseNot(i) {\n        return i.sign ? JSBI.__absoluteSubOne(i).__trim() : JSBI.__absoluteAddOne(i, !0);\n    }\n    static exponentiate(i, _) {\n        if (_.sign) throw new RangeError(\"Exponent must be positive\");\n        if (0 === _.length) return JSBI.__oneDigit(1, !1);\n        if (0 === i.length) return i;\n        if (1 === i.length && 1 === i.__digit(0)) return i.sign && 0 == (1 & _.__digit(0)) ? JSBI.unaryMinus(i) : i;\n        if (1 < _.length) throw new RangeError(\"BigInt too big\");\n        let t = _.__unsignedDigit(0);\n        if (1 === t) return i;\n        if (t >= JSBI.__kMaxLengthBits) throw new RangeError(\"BigInt too big\");\n        if (1 === i.length && 2 === i.__digit(0)) {\n            const _ = 1 + (0 | t / 30), e = i.sign && 0 != (1 & t), n = new JSBI(_, e);\n            n.__initializeDigits();\n            const g = 1 << t % 30;\n            return n.__setDigit(_ - 1, g), n;\n        }\n        let e = null, n = i;\n        for(0 != (1 & t) && (e = i), t >>= 1; 0 !== t; t >>= 1)n = JSBI.multiply(n, n), 0 != (1 & t) && (null === e ? e = n : e = JSBI.multiply(e, n));\n        return e;\n    }\n    static multiply(_, t) {\n        if (0 === _.length) return _;\n        if (0 === t.length) return t;\n        let i = _.length + t.length;\n        30 <= _.__clzmsd() + t.__clzmsd() && i--;\n        const e = new JSBI(i, _.sign !== t.sign);\n        e.__initializeDigits();\n        for(let n = 0; n < _.length; n++)JSBI.__multiplyAccumulate(t, _.__digit(n), e, n);\n        return e.__trim();\n    }\n    static divide(i, _) {\n        if (0 === _.length) throw new RangeError(\"Division by zero\");\n        if (0 > JSBI.__absoluteCompare(i, _)) return JSBI.__zero();\n        const t = i.sign !== _.sign, e = _.__unsignedDigit(0);\n        let n;\n        if (1 === _.length && 32767 >= e) {\n            if (1 === e) return t === i.sign ? i : JSBI.unaryMinus(i);\n            n = JSBI.__absoluteDivSmall(i, e, null);\n        } else n = JSBI.__absoluteDivLarge(i, _, !0, !1);\n        return n.sign = t, n.__trim();\n    }\n    static remainder(i, _) {\n        if (0 === _.length) throw new RangeError(\"Division by zero\");\n        if (0 > JSBI.__absoluteCompare(i, _)) return i;\n        const t = _.__unsignedDigit(0);\n        if (1 === _.length && 32767 >= t) {\n            if (1 === t) return JSBI.__zero();\n            const _ = JSBI.__absoluteModSmall(i, t);\n            return 0 === _ ? JSBI.__zero() : JSBI.__oneDigit(_, i.sign);\n        }\n        const e = JSBI.__absoluteDivLarge(i, _, !1, !0);\n        return e.sign = i.sign, e.__trim();\n    }\n    static add(i, _) {\n        const t = i.sign;\n        return t === _.sign ? JSBI.__absoluteAdd(i, _, t) : 0 <= JSBI.__absoluteCompare(i, _) ? JSBI.__absoluteSub(i, _, t) : JSBI.__absoluteSub(_, i, !t);\n    }\n    static subtract(i, _) {\n        const t = i.sign;\n        return t === _.sign ? 0 <= JSBI.__absoluteCompare(i, _) ? JSBI.__absoluteSub(i, _, t) : JSBI.__absoluteSub(_, i, !t) : JSBI.__absoluteAdd(i, _, t);\n    }\n    static leftShift(i, _) {\n        return 0 === _.length || 0 === i.length ? i : _.sign ? JSBI.__rightShiftByAbsolute(i, _) : JSBI.__leftShiftByAbsolute(i, _);\n    }\n    static signedRightShift(i, _) {\n        return 0 === _.length || 0 === i.length ? i : _.sign ? JSBI.__leftShiftByAbsolute(i, _) : JSBI.__rightShiftByAbsolute(i, _);\n    }\n    static unsignedRightShift() {\n        throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\");\n    }\n    static lessThan(i, _) {\n        return 0 > JSBI.__compareToBigInt(i, _);\n    }\n    static lessThanOrEqual(i, _) {\n        return 0 >= JSBI.__compareToBigInt(i, _);\n    }\n    static greaterThan(i, _) {\n        return 0 < JSBI.__compareToBigInt(i, _);\n    }\n    static greaterThanOrEqual(i, _) {\n        return 0 <= JSBI.__compareToBigInt(i, _);\n    }\n    static equal(_, t) {\n        if (_.sign !== t.sign) return !1;\n        if (_.length !== t.length) return !1;\n        for(let e = 0; e < _.length; e++)if (_.__digit(e) !== t.__digit(e)) return !1;\n        return !0;\n    }\n    static notEqual(i, _) {\n        return !JSBI.equal(i, _);\n    }\n    static bitwiseAnd(i, _) {\n        var t = Math.max;\n        if (!i.sign && !_.sign) return JSBI.__absoluteAnd(i, _).__trim();\n        if (i.sign && _.sign) {\n            const e = t(i.length, _.length) + 1;\n            let n = JSBI.__absoluteSubOne(i, e);\n            const g = JSBI.__absoluteSubOne(_);\n            return n = JSBI.__absoluteOr(n, g, n), JSBI.__absoluteAddOne(n, !0, n).__trim();\n        }\n        return i.sign && ([i, _] = [\n            _,\n            i\n        ]), JSBI.__absoluteAndNot(i, JSBI.__absoluteSubOne(_)).__trim();\n    }\n    static bitwiseXor(i, _) {\n        var t = Math.max;\n        if (!i.sign && !_.sign) return JSBI.__absoluteXor(i, _).__trim();\n        if (i.sign && _.sign) {\n            const e = t(i.length, _.length), n = JSBI.__absoluteSubOne(i, e), g = JSBI.__absoluteSubOne(_);\n            return JSBI.__absoluteXor(n, g, n).__trim();\n        }\n        const e = t(i.length, _.length) + 1;\n        i.sign && ([i, _] = [\n            _,\n            i\n        ]);\n        let n = JSBI.__absoluteSubOne(_, e);\n        return n = JSBI.__absoluteXor(n, i, n), JSBI.__absoluteAddOne(n, !0, n).__trim();\n    }\n    static bitwiseOr(i, _) {\n        var t = Math.max;\n        const e = t(i.length, _.length);\n        if (!i.sign && !_.sign) return JSBI.__absoluteOr(i, _).__trim();\n        if (i.sign && _.sign) {\n            let t = JSBI.__absoluteSubOne(i, e);\n            const n = JSBI.__absoluteSubOne(_);\n            return t = JSBI.__absoluteAnd(t, n, t), JSBI.__absoluteAddOne(t, !0, t).__trim();\n        }\n        i.sign && ([i, _] = [\n            _,\n            i\n        ]);\n        let n = JSBI.__absoluteSubOne(_, e);\n        return n = JSBI.__absoluteAndNot(n, i, n), JSBI.__absoluteAddOne(n, !0, n).__trim();\n    }\n    static asIntN(_, t) {\n        var i = Math.floor;\n        if (0 === t.length) return t;\n        if (_ = i(_), 0 > _) throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");\n        if (0 === _) return JSBI.__zero();\n        if (_ >= JSBI.__kMaxLengthBits) return t;\n        const e = 0 | (_ + 29) / 30;\n        if (t.length < e) return t;\n        const g = t.__unsignedDigit(e - 1), o = 1 << (_ - 1) % 30;\n        if (t.length === e && g < o) return t;\n        if (!((g & o) === o)) return JSBI.__truncateToNBits(_, t);\n        if (!t.sign) return JSBI.__truncateAndSubFromPowerOfTwo(_, t, !0);\n        if (0 == (g & o - 1)) {\n            for(let n = e - 2; 0 <= n; n--)if (0 !== t.__digit(n)) return JSBI.__truncateAndSubFromPowerOfTwo(_, t, !1);\n            return t.length === e && g === o ? t : JSBI.__truncateToNBits(_, t);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(_, t, !1);\n    }\n    static asUintN(i, _) {\n        var t = Math.floor;\n        if (0 === _.length) return _;\n        if (i = t(i), 0 > i) throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");\n        if (0 === i) return JSBI.__zero();\n        if (_.sign) {\n            if (i > JSBI.__kMaxLengthBits) throw new RangeError(\"BigInt too big\");\n            return JSBI.__truncateAndSubFromPowerOfTwo(i, _, !1);\n        }\n        if (i >= JSBI.__kMaxLengthBits) return _;\n        const e = 0 | (i + 29) / 30;\n        if (_.length < e) return _;\n        const g = i % 30;\n        if (_.length == e) {\n            if (0 === g) return _;\n            const i = _.__digit(e - 1);\n            if (0 == i >>> g) return _;\n        }\n        return JSBI.__truncateToNBits(i, _);\n    }\n    static ADD(i, _) {\n        if (i = JSBI.__toPrimitive(i), _ = JSBI.__toPrimitive(_), \"string\" == typeof i) return \"string\" != typeof _ && (_ = _.toString()), i + _;\n        if (\"string\" == typeof _) return i.toString() + _;\n        if (i = JSBI.__toNumeric(i), _ = JSBI.__toNumeric(_), JSBI.__isBigInt(i) && JSBI.__isBigInt(_)) return JSBI.add(i, _);\n        if (\"number\" == typeof i && \"number\" == typeof _) return i + _;\n        throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\");\n    }\n    static LT(i, _) {\n        return JSBI.__compare(i, _, 0);\n    }\n    static LE(i, _) {\n        return JSBI.__compare(i, _, 1);\n    }\n    static GT(i, _) {\n        return JSBI.__compare(i, _, 2);\n    }\n    static GE(i, _) {\n        return JSBI.__compare(i, _, 3);\n    }\n    static EQ(i, _) {\n        for(;;){\n            if (JSBI.__isBigInt(i)) return JSBI.__isBigInt(_) ? JSBI.equal(i, _) : JSBI.EQ(_, i);\n            if (\"number\" == typeof i) {\n                if (JSBI.__isBigInt(_)) return JSBI.__equalToNumber(_, i);\n                if (\"object\" != typeof _) return i == _;\n                _ = JSBI.__toPrimitive(_);\n            } else if (\"string\" == typeof i) {\n                if (JSBI.__isBigInt(_)) return i = JSBI.__fromString(i), null !== i && JSBI.equal(i, _);\n                if (\"object\" != typeof _) return i == _;\n                _ = JSBI.__toPrimitive(_);\n            } else if (\"boolean\" == typeof i) {\n                if (JSBI.__isBigInt(_)) return JSBI.__equalToNumber(_, +i);\n                if (\"object\" != typeof _) return i == _;\n                _ = JSBI.__toPrimitive(_);\n            } else if (\"symbol\" == typeof i) {\n                if (JSBI.__isBigInt(_)) return !1;\n                if (\"object\" != typeof _) return i == _;\n                _ = JSBI.__toPrimitive(_);\n            } else if (\"object\" == typeof i) {\n                if (\"object\" == typeof _ && _.constructor !== JSBI) return i == _;\n                i = JSBI.__toPrimitive(i);\n            } else return i == _;\n        }\n    }\n    static NE(i, _) {\n        return !JSBI.EQ(i, _);\n    }\n    static __zero() {\n        return new JSBI(0, !1);\n    }\n    static __oneDigit(i, _) {\n        const t = new JSBI(1, _);\n        return t.__setDigit(0, i), t;\n    }\n    __copy() {\n        const _ = new JSBI(this.length, this.sign);\n        for(let t = 0; t < this.length; t++)_[t] = this[t];\n        return _;\n    }\n    __trim() {\n        let i = this.length, _ = this[i - 1];\n        for(; 0 === _;)i--, _ = this[i - 1], this.pop();\n        return 0 === i && (this.sign = !1), this;\n    }\n    __initializeDigits() {\n        for(let _ = 0; _ < this.length; _++)this[_] = 0;\n    }\n    static __decideRounding(i, _, t, e) {\n        if (0 < _) return -1;\n        let n;\n        if (0 > _) n = -_ - 1;\n        else {\n            if (0 === t) return -1;\n            t--, e = i.__digit(t), n = 29;\n        }\n        let g = 1 << n;\n        if (0 == (e & g)) return -1;\n        if (g -= 1, 0 != (e & g)) return 1;\n        for(; 0 < t;)if (t--, 0 !== i.__digit(t)) return 1;\n        return 0;\n    }\n    static __fromDouble(i) {\n        JSBI.__kBitConversionDouble[0] = i;\n        const _ = 2047 & JSBI.__kBitConversionInts[1] >>> 20, t = _ - 1023, e = (0 | t / 30) + 1, n = new JSBI(e, 0 > i);\n        let g = 1048575 & JSBI.__kBitConversionInts[1] | 1048576, o = JSBI.__kBitConversionInts[0];\n        const s = 20, l = t % 30;\n        let r, a = 0;\n        if (l < 20) {\n            const i = s - l;\n            a = i + 32, r = g >>> i, g = g << 32 - i | o >>> i, o <<= 32 - i;\n        } else if (l === 20) a = 32, r = g, g = o, o = 0;\n        else {\n            const i = l - s;\n            a = 32 - i, r = g << i | o >>> 32 - i, g = o << i, o = 0;\n        }\n        n.__setDigit(e - 1, r);\n        for(let _ = e - 2; 0 <= _; _--)0 < a ? (a -= 30, r = g >>> 2, g = g << 30 | o >>> 2, o <<= 30) : r = 0, n.__setDigit(_, r);\n        return n.__trim();\n    }\n    static __isWhitespace(i) {\n        return !!(13 >= i && 9 <= i) || (159 >= i ? 32 == i : 131071 >= i ? 160 == i || 5760 == i : 196607 >= i ? (i &= 131071, 10 >= i || 40 == i || 41 == i || 47 == i || 95 == i || 4096 == i) : 65279 == i);\n    }\n    static __fromString(i, _ = 0) {\n        let t = 0;\n        const e = i.length;\n        let n = 0;\n        if (n === e) return JSBI.__zero();\n        let g = i.charCodeAt(n);\n        for(; JSBI.__isWhitespace(g);){\n            if (++n === e) return JSBI.__zero();\n            g = i.charCodeAt(n);\n        }\n        if (43 === g) {\n            if (++n === e) return null;\n            g = i.charCodeAt(n), t = 1;\n        } else if (45 === g) {\n            if (++n === e) return null;\n            g = i.charCodeAt(n), t = -1;\n        }\n        if (0 === _) {\n            if (_ = 10, 48 === g) {\n                if (++n === e) return JSBI.__zero();\n                if (g = i.charCodeAt(n), 88 === g || 120 === g) {\n                    if (_ = 16, ++n === e) return null;\n                    g = i.charCodeAt(n);\n                } else if (79 === g || 111 === g) {\n                    if (_ = 8, ++n === e) return null;\n                    g = i.charCodeAt(n);\n                } else if (66 === g || 98 === g) {\n                    if (_ = 2, ++n === e) return null;\n                    g = i.charCodeAt(n);\n                }\n            }\n        } else if (16 === _ && 48 === g) {\n            if (++n === e) return JSBI.__zero();\n            if (g = i.charCodeAt(n), 88 === g || 120 === g) {\n                if (++n === e) return null;\n                g = i.charCodeAt(n);\n            }\n        }\n        if (0 != t && 10 !== _) return null;\n        for(; 48 === g;){\n            if (++n === e) return JSBI.__zero();\n            g = i.charCodeAt(n);\n        }\n        const o = e - n;\n        let s = JSBI.__kMaxBitsPerChar[_], l = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (o > 1073741824 / s) return null;\n        const r = s * o + l >>> JSBI.__kBitsPerCharTableShift, a = new JSBI(0 | (r + 29) / 30, !1), u = 10 > _ ? _ : 10, h = 10 < _ ? _ - 10 : 0;\n        if (0 == (_ & _ - 1)) {\n            s >>= JSBI.__kBitsPerCharTableShift;\n            const _ = [], t = [];\n            let o = !1;\n            do {\n                let l = 0, r = 0;\n                for(;;){\n                    let _;\n                    if (g - 48 >>> 0 < u) _ = g - 48;\n                    else if ((32 | g) - 97 >>> 0 < h) _ = (32 | g) - 87;\n                    else {\n                        o = !0;\n                        break;\n                    }\n                    if (r += s, l = l << s | _, ++n === e) {\n                        o = !0;\n                        break;\n                    }\n                    if (g = i.charCodeAt(n), 30 < r + s) break;\n                }\n                _.push(l), t.push(r);\n            }while (!o);\n            JSBI.__fillFromParts(a, _, t);\n        } else {\n            a.__initializeDigits();\n            let t = !1, o = 0;\n            do {\n                let r = 0, b = 1;\n                for(;;){\n                    let s;\n                    if (g - 48 >>> 0 < u) s = g - 48;\n                    else if ((32 | g) - 97 >>> 0 < h) s = (32 | g) - 87;\n                    else {\n                        t = !0;\n                        break;\n                    }\n                    const l = b * _;\n                    if (1073741823 < l) break;\n                    if (b = l, r = r * _ + s, o++, ++n === e) {\n                        t = !0;\n                        break;\n                    }\n                    g = i.charCodeAt(n);\n                }\n                l = 30 * JSBI.__kBitsPerCharTableMultiplier - 1;\n                const D = 0 | (s * o + l >>> JSBI.__kBitsPerCharTableShift) / 30;\n                a.__inplaceMultiplyAdd(b, r, D);\n            }while (!t);\n        }\n        if (n !== e) {\n            if (!JSBI.__isWhitespace(g)) return null;\n            for(n++; n < e; n++)if (g = i.charCodeAt(n), !JSBI.__isWhitespace(g)) return null;\n        }\n        return a.sign = -1 == t, a.__trim();\n    }\n    static __fillFromParts(_, t, e) {\n        let n = 0, g = 0, o = 0;\n        for(let s = t.length - 1; 0 <= s; s--){\n            const i = t[s], l = e[s];\n            g |= i << o, o += l, 30 === o ? (_.__setDigit(n++, g), o = 0, g = 0) : 30 < o && (_.__setDigit(n++, 1073741823 & g), o -= 30, g = i >>> l - o);\n        }\n        if (0 !== g) {\n            if (n >= _.length) throw new Error(\"implementation bug\");\n            _.__setDigit(n++, g);\n        }\n        for(; n < _.length; n++)_.__setDigit(n, 0);\n    }\n    static __toStringBasePowerOfTwo(_, i) {\n        const t = _.length;\n        let e = i - 1;\n        e = (85 & e >>> 1) + (85 & e), e = (51 & e >>> 2) + (51 & e), e = (15 & e >>> 4) + (15 & e);\n        const n = e, g = i - 1, o = _.__digit(t - 1), s = JSBI.__clz30(o);\n        let l = 0 | (30 * t - s + n - 1) / n;\n        if (_.sign && l++, 268435456 < l) throw new Error(\"string too long\");\n        const r = Array(l);\n        let a = l - 1, u = 0, d = 0;\n        for(let e = 0; e < t - 1; e++){\n            const i = _.__digit(e), t = (u | i << d) & g;\n            r[a--] = JSBI.__kConversionChars[t];\n            const o = n - d;\n            for(u = i >>> o, d = 30 - o; d >= n;)r[a--] = JSBI.__kConversionChars[u & g], u >>>= n, d -= n;\n        }\n        const h = (u | o << d) & g;\n        for(r[a--] = JSBI.__kConversionChars[h], u = o >>> n - d; 0 !== u;)r[a--] = JSBI.__kConversionChars[u & g], u >>>= n;\n        if (_.sign && (r[a--] = \"-\"), -1 != a) throw new Error(\"implementation bug\");\n        return r.join(\"\");\n    }\n    static __toStringGeneric(_, i, t) {\n        const e = _.length;\n        if (0 === e) return \"\";\n        if (1 === e) {\n            let e = _.__unsignedDigit(0).toString(i);\n            return !1 === t && _.sign && (e = \"-\" + e), e;\n        }\n        const n = 30 * e - JSBI.__clz30(_.__digit(e - 1)), g = JSBI.__kMaxBitsPerChar[i], o = g - 1;\n        let s = n * JSBI.__kBitsPerCharTableMultiplier;\n        s += o - 1, s = 0 | s / o;\n        const l = s + 1 >> 1, r = JSBI.exponentiate(JSBI.__oneDigit(i, !1), JSBI.__oneDigit(l, !1));\n        let a, u;\n        const d = r.__unsignedDigit(0);\n        if (1 === r.length && 32767 >= d) {\n            a = new JSBI(_.length, !1), a.__initializeDigits();\n            let t = 0;\n            for(let e = 2 * _.length - 1; 0 <= e; e--){\n                const i = t << 15 | _.__halfDigit(e);\n                a.__setHalfDigit(e, 0 | i / d), t = 0 | i % d;\n            }\n            u = t.toString(i);\n        } else {\n            const t = JSBI.__absoluteDivLarge(_, r, !0, !0);\n            a = t.quotient;\n            const e = t.remainder.__trim();\n            u = JSBI.__toStringGeneric(e, i, !0);\n        }\n        a.__trim();\n        let h = JSBI.__toStringGeneric(a, i, !0);\n        for(; u.length < l;)u = \"0\" + u;\n        return !1 === t && _.sign && (h = \"-\" + h), h + u;\n    }\n    static __unequalSign(i) {\n        return i ? -1 : 1;\n    }\n    static __absoluteGreater(i) {\n        return i ? -1 : 1;\n    }\n    static __absoluteLess(i) {\n        return i ? 1 : -1;\n    }\n    static __compareToBigInt(i, _) {\n        const t = i.sign;\n        if (t !== _.sign) return JSBI.__unequalSign(t);\n        const e = JSBI.__absoluteCompare(i, _);\n        return 0 < e ? JSBI.__absoluteGreater(t) : 0 > e ? JSBI.__absoluteLess(t) : 0;\n    }\n    static __compareToNumber(i, _) {\n        if (JSBI.__isOneDigitInt(_)) {\n            const t = i.sign, e = 0 > _;\n            if (t !== e) return JSBI.__unequalSign(t);\n            if (0 === i.length) {\n                if (e) throw new Error(\"implementation bug\");\n                return 0 === _ ? 0 : -1;\n            }\n            if (1 < i.length) return JSBI.__absoluteGreater(t);\n            const n = Math.abs(_), g = i.__unsignedDigit(0);\n            return g > n ? JSBI.__absoluteGreater(t) : g < n ? JSBI.__absoluteLess(t) : 0;\n        }\n        return JSBI.__compareToDouble(i, _);\n    }\n    static __compareToDouble(i, _) {\n        if (_ !== _) return _;\n        if (_ === 1 / 0) return -1;\n        if (_ === -Infinity) return 1;\n        const t = i.sign;\n        if (t !== 0 > _) return JSBI.__unequalSign(t);\n        if (0 === _) throw new Error(\"implementation bug: should be handled elsewhere\");\n        if (0 === i.length) return -1;\n        JSBI.__kBitConversionDouble[0] = _;\n        const e = 2047 & JSBI.__kBitConversionInts[1] >>> 20;\n        if (2047 == e) throw new Error(\"implementation bug: handled elsewhere\");\n        const n = e - 1023;\n        if (0 > n) return JSBI.__absoluteGreater(t);\n        const g = i.length;\n        let o = i.__digit(g - 1);\n        const s = JSBI.__clz30(o), l = 30 * g - s, r = n + 1;\n        if (l < r) return JSBI.__absoluteLess(t);\n        if (l > r) return JSBI.__absoluteGreater(t);\n        let a = 1048576 | 1048575 & JSBI.__kBitConversionInts[1], u = JSBI.__kBitConversionInts[0];\n        const d = 20, h = 29 - s;\n        if (h !== (0 | (l - 1) % 30)) throw new Error(\"implementation bug\");\n        let m, b = 0;\n        if (20 > h) {\n            const i = d - h;\n            b = i + 32, m = a >>> i, a = a << 32 - i | u >>> i, u <<= 32 - i;\n        } else if (20 === h) b = 32, m = a, a = u, u = 0;\n        else {\n            const i = h - d;\n            b = 32 - i, m = a << i | u >>> 32 - i, a = u << i, u = 0;\n        }\n        if (o >>>= 0, m >>>= 0, o > m) return JSBI.__absoluteGreater(t);\n        if (o < m) return JSBI.__absoluteLess(t);\n        for(let e = g - 2; 0 <= e; e--){\n            0 < b ? (b -= 30, m = a >>> 2, a = a << 30 | u >>> 2, u <<= 30) : m = 0;\n            const _ = i.__unsignedDigit(e);\n            if (_ > m) return JSBI.__absoluteGreater(t);\n            if (_ < m) return JSBI.__absoluteLess(t);\n        }\n        if (0 !== a || 0 !== u) {\n            if (0 === b) throw new Error(\"implementation bug\");\n            return JSBI.__absoluteLess(t);\n        }\n        return 0;\n    }\n    static __equalToNumber(i, _) {\n        var t = Math.abs;\n        return JSBI.__isOneDigitInt(_) ? 0 === _ ? 0 === i.length : 1 === i.length && i.sign === 0 > _ && i.__unsignedDigit(0) === t(_) : 0 === JSBI.__compareToDouble(i, _);\n    }\n    static __comparisonResultToBool(i, _) {\n        return 0 === _ ? 0 > i : 1 === _ ? 0 >= i : 2 === _ ? 0 < i : 3 === _ ? 0 <= i : void 0;\n    }\n    static __compare(i, _, t) {\n        if (i = JSBI.__toPrimitive(i), _ = JSBI.__toPrimitive(_), \"string\" == typeof i && \"string\" == typeof _) switch(t){\n            case 0:\n                return i < _;\n            case 1:\n                return i <= _;\n            case 2:\n                return i > _;\n            case 3:\n                return i >= _;\n        }\n        if (JSBI.__isBigInt(i) && \"string\" == typeof _) return _ = JSBI.__fromString(_), null !== _ && JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i, _), t);\n        if (\"string\" == typeof i && JSBI.__isBigInt(_)) return i = JSBI.__fromString(i), null !== i && JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i, _), t);\n        if (i = JSBI.__toNumeric(i), _ = JSBI.__toNumeric(_), JSBI.__isBigInt(i)) {\n            if (JSBI.__isBigInt(_)) return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i, _), t);\n            if (\"number\" != typeof _) throw new Error(\"implementation bug\");\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(i, _), t);\n        }\n        if (\"number\" != typeof i) throw new Error(\"implementation bug\");\n        if (JSBI.__isBigInt(_)) return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(_, i), 2 ^ t);\n        if (\"number\" != typeof _) throw new Error(\"implementation bug\");\n        return 0 === t ? i < _ : 1 === t ? i <= _ : 2 === t ? i > _ : 3 === t ? i >= _ : void 0;\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(_, t, e) {\n        if (_.length < t.length) return JSBI.__absoluteAdd(t, _, e);\n        if (0 === _.length) return _;\n        if (0 === t.length) return _.sign === e ? _ : JSBI.unaryMinus(_);\n        let n = _.length;\n        (0 === _.__clzmsd() || t.length === _.length && 0 === t.__clzmsd()) && n++;\n        const g = new JSBI(n, e);\n        let o = 0, s = 0;\n        for(; s < t.length; s++){\n            const i = _.__digit(s) + t.__digit(s) + o;\n            o = i >>> 30, g.__setDigit(s, 1073741823 & i);\n        }\n        for(; s < _.length; s++){\n            const i = _.__digit(s) + o;\n            o = i >>> 30, g.__setDigit(s, 1073741823 & i);\n        }\n        return s < g.length && g.__setDigit(s, o), g.__trim();\n    }\n    static __absoluteSub(_, t, e) {\n        if (0 === _.length) return _;\n        if (0 === t.length) return _.sign === e ? _ : JSBI.unaryMinus(_);\n        const n = new JSBI(_.length, e);\n        let g = 0, o = 0;\n        for(; o < t.length; o++){\n            const i = _.__digit(o) - t.__digit(o) - g;\n            g = 1 & i >>> 30, n.__setDigit(o, 1073741823 & i);\n        }\n        for(; o < _.length; o++){\n            const i = _.__digit(o) - g;\n            g = 1 & i >>> 30, n.__setDigit(o, 1073741823 & i);\n        }\n        return n.__trim();\n    }\n    static __absoluteAddOne(_, i, t = null) {\n        const e = _.length;\n        null === t ? t = new JSBI(e, i) : t.sign = i;\n        let n = 1;\n        for(let g = 0; g < e; g++){\n            const i = _.__digit(g) + n;\n            n = i >>> 30, t.__setDigit(g, 1073741823 & i);\n        }\n        return 0 != n && t.__setDigitGrow(e, 1), t;\n    }\n    static __absoluteSubOne(_, t) {\n        const e = _.length;\n        t = t || e;\n        const n = new JSBI(t, !1);\n        let g = 1;\n        for(let o = 0; o < e; o++){\n            const i = _.__digit(o) - g;\n            g = 1 & i >>> 30, n.__setDigit(o, 1073741823 & i);\n        }\n        if (0 != g) throw new Error(\"implementation bug\");\n        for(let g = e; g < t; g++)n.__setDigit(g, 0);\n        return n;\n    }\n    static __absoluteAnd(_, t, e = null) {\n        let n = _.length, g = t.length, o = g;\n        if (n < g) {\n            o = n;\n            const i = _, e = n;\n            _ = t, n = g, t = i, g = e;\n        }\n        let s = o;\n        null === e ? e = new JSBI(s, !1) : s = e.length;\n        let l = 0;\n        for(; l < o; l++)e.__setDigit(l, _.__digit(l) & t.__digit(l));\n        for(; l < s; l++)e.__setDigit(l, 0);\n        return e;\n    }\n    static __absoluteAndNot(_, t, e = null) {\n        const n = _.length, g = t.length;\n        let o = g;\n        n < g && (o = n);\n        let s = n;\n        null === e ? e = new JSBI(s, !1) : s = e.length;\n        let l = 0;\n        for(; l < o; l++)e.__setDigit(l, _.__digit(l) & ~t.__digit(l));\n        for(; l < n; l++)e.__setDigit(l, _.__digit(l));\n        for(; l < s; l++)e.__setDigit(l, 0);\n        return e;\n    }\n    static __absoluteOr(_, t, e = null) {\n        let n = _.length, g = t.length, o = g;\n        if (n < g) {\n            o = n;\n            const i = _, e = n;\n            _ = t, n = g, t = i, g = e;\n        }\n        let s = n;\n        null === e ? e = new JSBI(s, !1) : s = e.length;\n        let l = 0;\n        for(; l < o; l++)e.__setDigit(l, _.__digit(l) | t.__digit(l));\n        for(; l < n; l++)e.__setDigit(l, _.__digit(l));\n        for(; l < s; l++)e.__setDigit(l, 0);\n        return e;\n    }\n    static __absoluteXor(_, t, e = null) {\n        let n = _.length, g = t.length, o = g;\n        if (n < g) {\n            o = n;\n            const i = _, e = n;\n            _ = t, n = g, t = i, g = e;\n        }\n        let s = n;\n        null === e ? e = new JSBI(s, !1) : s = e.length;\n        let l = 0;\n        for(; l < o; l++)e.__setDigit(l, _.__digit(l) ^ t.__digit(l));\n        for(; l < n; l++)e.__setDigit(l, _.__digit(l));\n        for(; l < s; l++)e.__setDigit(l, 0);\n        return e;\n    }\n    static __absoluteCompare(_, t) {\n        const e = _.length - t.length;\n        if (0 != e) return e;\n        let n = _.length - 1;\n        for(; 0 <= n && _.__digit(n) === t.__digit(n);)n--;\n        return 0 > n ? 0 : _.__unsignedDigit(n) > t.__unsignedDigit(n) ? 1 : -1;\n    }\n    static __multiplyAccumulate(_, t, e, n) {\n        if (0 === t) return;\n        const g = 32767 & t, o = t >>> 15;\n        let s = 0, l = 0;\n        for(let r, a = 0; a < _.length; a++, n++){\n            r = e.__digit(n);\n            const i = _.__digit(a), t = 32767 & i, u = i >>> 15, d = JSBI.__imul(t, g), h = JSBI.__imul(t, o), m = JSBI.__imul(u, g), b = JSBI.__imul(u, o);\n            r += l + d + s, s = r >>> 30, r &= 1073741823, r += ((32767 & h) << 15) + ((32767 & m) << 15), s += r >>> 30, l = b + (h >>> 15) + (m >>> 15), e.__setDigit(n, 1073741823 & r);\n        }\n        for(; 0 != s || 0 !== l; n++){\n            let i = e.__digit(n);\n            i += s + l, l = 0, s = i >>> 30, e.__setDigit(n, 1073741823 & i);\n        }\n    }\n    static __internalMultiplyAdd(_, t, e, g, o) {\n        let s = e, l = 0;\n        for(let n = 0; n < g; n++){\n            const i = _.__digit(n), e = JSBI.__imul(32767 & i, t), g = JSBI.__imul(i >>> 15, t), a = e + ((32767 & g) << 15) + l + s;\n            s = a >>> 30, l = g >>> 15, o.__setDigit(n, 1073741823 & a);\n        }\n        if (o.length > g) for(o.__setDigit(g++, s + l); g < o.length;)o.__setDigit(g++, 0);\n        else if (0 !== s + l) throw new Error(\"implementation bug\");\n    }\n    __inplaceMultiplyAdd(i, _, t) {\n        t > this.length && (t = this.length);\n        const e = 32767 & i, n = i >>> 15;\n        let g = 0, o = _;\n        for(let s = 0; s < t; s++){\n            const i = this.__digit(s), _ = 32767 & i, t = i >>> 15, l = JSBI.__imul(_, e), r = JSBI.__imul(_, n), a = JSBI.__imul(t, e), u = JSBI.__imul(t, n);\n            let d = o + l + g;\n            g = d >>> 30, d &= 1073741823, d += ((32767 & r) << 15) + ((32767 & a) << 15), g += d >>> 30, o = u + (r >>> 15) + (a >>> 15), this.__setDigit(s, 1073741823 & d);\n        }\n        if (0 != g || 0 !== o) throw new Error(\"implementation bug\");\n    }\n    static __absoluteDivSmall(_, t, e = null) {\n        null === e && (e = new JSBI(_.length, !1));\n        let n = 0;\n        for(let g, o = 2 * _.length - 1; 0 <= o; o -= 2){\n            g = (n << 15 | _.__halfDigit(o)) >>> 0;\n            const i = 0 | g / t;\n            n = 0 | g % t, g = (n << 15 | _.__halfDigit(o - 1)) >>> 0;\n            const s = 0 | g / t;\n            n = 0 | g % t, e.__setDigit(o >>> 1, i << 15 | s);\n        }\n        return e;\n    }\n    static __absoluteModSmall(_, t) {\n        let e = 0;\n        for(let n = 2 * _.length - 1; 0 <= n; n--){\n            const i = (e << 15 | _.__halfDigit(n)) >>> 0;\n            e = 0 | i % t;\n        }\n        return e;\n    }\n    static __absoluteDivLarge(i, _, t, e) {\n        const g = _.__halfDigitLength(), n = _.length, o = i.__halfDigitLength() - g;\n        let s = null;\n        t && (s = new JSBI(o + 2 >>> 1, !1), s.__initializeDigits());\n        const l = new JSBI(g + 2 >>> 1, !1);\n        l.__initializeDigits();\n        const r = JSBI.__clz15(_.__halfDigit(g - 1));\n        0 < r && (_ = JSBI.__specialLeftShift(_, r, 0));\n        const a = JSBI.__specialLeftShift(i, r, 1), u = _.__halfDigit(g - 1);\n        let d = 0;\n        for(let r, h = o; 0 <= h; h--){\n            r = 32767;\n            const i = a.__halfDigit(h + g);\n            if (i !== u) {\n                const t = (i << 15 | a.__halfDigit(h + g - 1)) >>> 0;\n                r = 0 | t / u;\n                let e = 0 | t % u;\n                const n = _.__halfDigit(g - 2), o = a.__halfDigit(h + g - 2);\n                for(; JSBI.__imul(r, n) >>> 0 > (e << 16 | o) >>> 0 && (r--, e += u, !(32767 < e)););\n            }\n            JSBI.__internalMultiplyAdd(_, r, 0, n, l);\n            let e = a.__inplaceSub(l, h, g + 1);\n            0 !== e && (e = a.__inplaceAdd(_, h, g), a.__setHalfDigit(h + g, 32767 & a.__halfDigit(h + g) + e), r--), t && (1 & h ? d = r << 15 : s.__setDigit(h >>> 1, d | r));\n        }\n        if (e) return a.__inplaceRightShift(r), t ? {\n            quotient: s,\n            remainder: a\n        } : a;\n        if (t) return s;\n        throw new Error(\"unreachable\");\n    }\n    static __clz15(i) {\n        return JSBI.__clz30(i) - 15;\n    }\n    __inplaceAdd(_, t, e) {\n        let n = 0;\n        for(let g = 0; g < e; g++){\n            const i = this.__halfDigit(t + g) + _.__halfDigit(g) + n;\n            n = i >>> 15, this.__setHalfDigit(t + g, 32767 & i);\n        }\n        return n;\n    }\n    __inplaceSub(_, t, e) {\n        let n = 0;\n        if (1 & t) {\n            t >>= 1;\n            let g = this.__digit(t), o = 32767 & g, s = 0;\n            for(; s < e - 1 >>> 1; s++){\n                const i = _.__digit(s), e = (g >>> 15) - (32767 & i) - n;\n                n = 1 & e >>> 15, this.__setDigit(t + s, (32767 & e) << 15 | 32767 & o), g = this.__digit(t + s + 1), o = (32767 & g) - (i >>> 15) - n, n = 1 & o >>> 15;\n            }\n            const i = _.__digit(s), l = (g >>> 15) - (32767 & i) - n;\n            n = 1 & l >>> 15, this.__setDigit(t + s, (32767 & l) << 15 | 32767 & o);\n            if (t + s + 1 >= this.length) throw new RangeError(\"out of bounds\");\n            0 == (1 & e) && (g = this.__digit(t + s + 1), o = (32767 & g) - (i >>> 15) - n, n = 1 & o >>> 15, this.__setDigit(t + _.length, 1073709056 & g | 32767 & o));\n        } else {\n            t >>= 1;\n            let g = 0;\n            for(; g < _.length - 1; g++){\n                const i = this.__digit(t + g), e = _.__digit(g), o = (32767 & i) - (32767 & e) - n;\n                n = 1 & o >>> 15;\n                const s = (i >>> 15) - (e >>> 15) - n;\n                n = 1 & s >>> 15, this.__setDigit(t + g, (32767 & s) << 15 | 32767 & o);\n            }\n            const i = this.__digit(t + g), o = _.__digit(g), s = (32767 & i) - (32767 & o) - n;\n            n = 1 & s >>> 15;\n            let l = 0;\n            0 == (1 & e) && (l = (i >>> 15) - (o >>> 15) - n, n = 1 & l >>> 15), this.__setDigit(t + g, (32767 & l) << 15 | 32767 & s);\n        }\n        return n;\n    }\n    __inplaceRightShift(_) {\n        if (0 === _) return;\n        let t = this.__digit(0) >>> _;\n        const e = this.length - 1;\n        for(let n = 0; n < e; n++){\n            const i = this.__digit(n + 1);\n            this.__setDigit(n, 1073741823 & i << 30 - _ | t), t = i >>> _;\n        }\n        this.__setDigit(e, t);\n    }\n    static __specialLeftShift(_, t, e) {\n        const g = _.length, n = new JSBI(g + e, !1);\n        if (0 === t) {\n            for(let t = 0; t < g; t++)n.__setDigit(t, _.__digit(t));\n            return 0 < e && n.__setDigit(g, 0), n;\n        }\n        let o = 0;\n        for(let s = 0; s < g; s++){\n            const i = _.__digit(s);\n            n.__setDigit(s, 1073741823 & i << t | o), o = i >>> 30 - t;\n        }\n        return 0 < e && n.__setDigit(g, o), n;\n    }\n    static __leftShiftByAbsolute(_, i) {\n        const t = JSBI.__toShiftAmount(i);\n        if (0 > t) throw new RangeError(\"BigInt too big\");\n        const e = 0 | t / 30, n = t % 30, g = _.length, o = 0 !== n && 0 != _.__digit(g - 1) >>> 30 - n, s = g + e + (o ? 1 : 0), l = new JSBI(s, _.sign);\n        if (0 === n) {\n            let t = 0;\n            for(; t < e; t++)l.__setDigit(t, 0);\n            for(; t < s; t++)l.__setDigit(t, _.__digit(t - e));\n        } else {\n            let t = 0;\n            for(let _ = 0; _ < e; _++)l.__setDigit(_, 0);\n            for(let o = 0; o < g; o++){\n                const i = _.__digit(o);\n                l.__setDigit(o + e, 1073741823 & i << n | t), t = i >>> 30 - n;\n            }\n            if (o) l.__setDigit(g + e, t);\n            else if (0 !== t) throw new Error(\"implementation bug\");\n        }\n        return l.__trim();\n    }\n    static __rightShiftByAbsolute(_, i) {\n        const t = _.length, e = _.sign, n = JSBI.__toShiftAmount(i);\n        if (0 > n) return JSBI.__rightShiftByMaximum(e);\n        const g = 0 | n / 30, o = n % 30;\n        let s = t - g;\n        if (0 >= s) return JSBI.__rightShiftByMaximum(e);\n        let l = !1;\n        if (e) {\n            if (0 != (_.__digit(g) & (1 << o) - 1)) l = !0;\n            else for(let t = 0; t < g; t++)if (0 !== _.__digit(t)) {\n                l = !0;\n                break;\n            }\n        }\n        if (l && 0 === o) {\n            const i = _.__digit(t - 1);\n            0 == ~i && s++;\n        }\n        let r = new JSBI(s, e);\n        if (0 === o) {\n            r.__setDigit(s - 1, 0);\n            for(let e = g; e < t; e++)r.__setDigit(e - g, _.__digit(e));\n        } else {\n            let e = _.__digit(g) >>> o;\n            const n = t - g - 1;\n            for(let t = 0; t < n; t++){\n                const i = _.__digit(t + g + 1);\n                r.__setDigit(t, 1073741823 & i << 30 - o | e), e = i >>> o;\n            }\n            r.__setDigit(n, e);\n        }\n        return l && (r = JSBI.__absoluteAddOne(r, !0, r)), r.__trim();\n    }\n    static __rightShiftByMaximum(i) {\n        return i ? JSBI.__oneDigit(1, !0) : JSBI.__zero();\n    }\n    static __toShiftAmount(i) {\n        if (1 < i.length) return -1;\n        const _ = i.__unsignedDigit(0);\n        return _ > JSBI.__kMaxLengthBits ? -1 : _;\n    }\n    static __toPrimitive(i, _ = \"default\") {\n        if (\"object\" != typeof i) return i;\n        if (i.constructor === JSBI) return i;\n        if (\"undefined\" != typeof Symbol && \"symbol\" == typeof Symbol.toPrimitive) {\n            const t = i[Symbol.toPrimitive];\n            if (t) {\n                const i = t(_);\n                if (\"object\" != typeof i) return i;\n                throw new TypeError(\"Cannot convert object to primitive value\");\n            }\n        }\n        const t = i.valueOf;\n        if (t) {\n            const _ = t.call(i);\n            if (\"object\" != typeof _) return _;\n        }\n        const e = i.toString;\n        if (e) {\n            const _ = e.call(i);\n            if (\"object\" != typeof _) return _;\n        }\n        throw new TypeError(\"Cannot convert object to primitive value\");\n    }\n    static __toNumeric(i) {\n        return JSBI.__isBigInt(i) ? i : +i;\n    }\n    static __isBigInt(i) {\n        return \"object\" == typeof i && null !== i && i.constructor === JSBI;\n    }\n    static __truncateToNBits(i, _) {\n        const t = 0 | (i + 29) / 30, e = new JSBI(t, _.sign), n = t - 1;\n        for(let t = 0; t < n; t++)e.__setDigit(t, _.__digit(t));\n        let g = _.__digit(n);\n        if (0 != i % 30) {\n            const _ = 32 - i % 30;\n            g = g << _ >>> _;\n        }\n        return e.__setDigit(n, g), e.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(_, t, e) {\n        var n = Math.min;\n        const g = 0 | (_ + 29) / 30, o = new JSBI(g, e);\n        let s = 0;\n        const l = g - 1;\n        let a = 0;\n        for(const i = n(l, t.length); s < i; s++){\n            const i = 0 - t.__digit(s) - a;\n            a = 1 & i >>> 30, o.__setDigit(s, 1073741823 & i);\n        }\n        for(; s < l; s++)o.__setDigit(s, 0 | 1073741823 & -a);\n        let u = l < t.length ? t.__digit(l) : 0;\n        const d = _ % 30;\n        let h;\n        if (0 == d) h = 0 - u - a, h &= 1073741823;\n        else {\n            const i = 32 - d;\n            u = u << i >>> i;\n            const _ = 1 << 32 - i;\n            h = _ - u - a, h &= _ - 1;\n        }\n        return o.__setDigit(l, h), o.__trim();\n    }\n    __digit(_) {\n        return this[_];\n    }\n    __unsignedDigit(_) {\n        return this[_] >>> 0;\n    }\n    __setDigit(_, i) {\n        this[_] = 0 | i;\n    }\n    __setDigitGrow(_, i) {\n        this[_] = 0 | i;\n    }\n    __halfDigitLength() {\n        const i = this.length;\n        return 32767 >= this.__unsignedDigit(i - 1) ? 2 * i - 1 : 2 * i;\n    }\n    __halfDigit(_) {\n        return 32767 & this[_ >>> 1] >>> 15 * (1 & _);\n    }\n    __setHalfDigit(_, i) {\n        const t = _ >>> 1, e = this.__digit(t), n = 1 & _ ? 32767 & e | i << 15 : 1073709056 & e | 32767 & i;\n        this.__setDigit(t, n);\n    }\n    static __digitPow(i, _) {\n        let t = 1;\n        for(; 0 < _;)1 & _ && (t *= i), _ >>>= 1, i *= i;\n        return t;\n    }\n    static __isOneDigitInt(i) {\n        return (1073741823 & i) === i;\n    }\n}\nJSBI.__kMaxLength = 33554432, JSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5, JSBI.__kMaxBitsPerChar = [\n    0,\n    0,\n    32,\n    51,\n    64,\n    75,\n    83,\n    90,\n    96,\n    102,\n    107,\n    111,\n    115,\n    119,\n    122,\n    126,\n    128,\n    131,\n    134,\n    136,\n    139,\n    141,\n    143,\n    145,\n    147,\n    149,\n    151,\n    153,\n    154,\n    156,\n    158,\n    159,\n    160,\n    162,\n    163,\n    165,\n    166\n], JSBI.__kBitsPerCharTableShift = 5, JSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift, JSBI.__kConversionChars = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\"\n], JSBI.__kBitConversionBuffer = new ArrayBuffer(8), JSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer), JSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer), JSBI.__clz30 = Math.clz32 ? function(i) {\n    return Math.clz32(i) - 2;\n} : function(i) {\n    return 0 === i ? 30 : 0 | 29 - (0 | Math.log(i >>> 0) / Math.LN2);\n}, JSBI.__imul = Math.imul || function(i, _) {\n    return 0 | i * _;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JSBI); //# sourceMappingURL=jsbi.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsbi/dist/jsbi.mjs\n");

/***/ })

};
;