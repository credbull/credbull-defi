create type "public"."kyc_event" as enum ('processing', 'accepted', 'rejected');

create table "public"."kyc_events" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "address" text not null,
    "event_name" kyc_event not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."kyc_events" enable row level security;

CREATE UNIQUE INDEX kyc_events_pkey ON public.kyc_events USING btree (id);

alter table "public"."kyc_events" add constraint "kyc_events_pkey" PRIMARY KEY using index "kyc_events_pkey";

grant delete on table "public"."kyc_events" to "anon";

grant insert on table "public"."kyc_events" to "anon";

grant references on table "public"."kyc_events" to "anon";

grant select on table "public"."kyc_events" to "anon";

grant trigger on table "public"."kyc_events" to "anon";

grant truncate on table "public"."kyc_events" to "anon";

grant update on table "public"."kyc_events" to "anon";

grant delete on table "public"."kyc_events" to "authenticated";

grant insert on table "public"."kyc_events" to "authenticated";

grant references on table "public"."kyc_events" to "authenticated";

grant select on table "public"."kyc_events" to "authenticated";

grant trigger on table "public"."kyc_events" to "authenticated";

grant truncate on table "public"."kyc_events" to "authenticated";

grant update on table "public"."kyc_events" to "authenticated";

grant delete on table "public"."kyc_events" to "service_role";

grant insert on table "public"."kyc_events" to "service_role";

grant references on table "public"."kyc_events" to "service_role";

grant select on table "public"."kyc_events" to "service_role";

grant trigger on table "public"."kyc_events" to "service_role";

grant truncate on table "public"."kyc_events" to "service_role";

grant update on table "public"."kyc_events" to "service_role";

create policy "Only users based on user_id"
on "public"."user_wallets"
as permissive
for all
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



