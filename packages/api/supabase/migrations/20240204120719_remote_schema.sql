drop policy "Segregate vaults by tenants" on "public"."vault_distribution_entities";

revoke delete on table "public"."vault_distribution_entities" from "anon";

revoke insert on table "public"."vault_distribution_entities" from "anon";

revoke references on table "public"."vault_distribution_entities" from "anon";

revoke select on table "public"."vault_distribution_entities" from "anon";

revoke trigger on table "public"."vault_distribution_entities" from "anon";

revoke truncate on table "public"."vault_distribution_entities" from "anon";

revoke update on table "public"."vault_distribution_entities" from "anon";

revoke delete on table "public"."vault_distribution_entities" from "authenticated";

revoke insert on table "public"."vault_distribution_entities" from "authenticated";

revoke references on table "public"."vault_distribution_entities" from "authenticated";

revoke select on table "public"."vault_distribution_entities" from "authenticated";

revoke trigger on table "public"."vault_distribution_entities" from "authenticated";

revoke truncate on table "public"."vault_distribution_entities" from "authenticated";

revoke update on table "public"."vault_distribution_entities" from "authenticated";

revoke delete on table "public"."vault_distribution_entities" from "service_role";

revoke insert on table "public"."vault_distribution_entities" from "service_role";

revoke references on table "public"."vault_distribution_entities" from "service_role";

revoke select on table "public"."vault_distribution_entities" from "service_role";

revoke trigger on table "public"."vault_distribution_entities" from "service_role";

revoke truncate on table "public"."vault_distribution_entities" from "service_role";

revoke update on table "public"."vault_distribution_entities" from "service_role";

alter table "public"."vault_distribution_entities" drop constraint "vault_distribution_entities_tenant_fkey";

alter table "public"."vault_distribution_entities" drop constraint "vault_distribution_entities_vault_id_fkey";

alter table "public"."vault_distribution_configs" drop constraint "vault_distribution_configs_entity_id_fkey";

alter table "public"."vault_distribution_entities" drop constraint "vault_distribution_entities_pkey";

drop index if exists "public"."vault_distribution_entities_pkey";

drop table "public"."vault_distribution_entities";

create table "public"."vault_entities" (
    "id" bigint generated by default as identity not null,
    "type" vault_entity_types not null,
    "address" text not null,
    "vault_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "tenant" uuid
);


alter table "public"."vault_entities" enable row level security;

CREATE UNIQUE INDEX vault_distribution_entities_pkey ON public.vault_entities USING btree (id);

alter table "public"."vault_entities" add constraint "vault_distribution_entities_pkey" PRIMARY KEY using index "vault_distribution_entities_pkey";

alter table "public"."vault_entities" add constraint "vault_entities_tenant_fkey" FOREIGN KEY (tenant) REFERENCES auth.users(id) ON DELETE SET NULL not valid;

alter table "public"."vault_entities" validate constraint "vault_entities_tenant_fkey";

alter table "public"."vault_entities" add constraint "vault_entities_vault_id_fkey" FOREIGN KEY (vault_id) REFERENCES vaults(id) ON DELETE CASCADE not valid;

alter table "public"."vault_entities" validate constraint "vault_entities_vault_id_fkey";

alter table "public"."vault_distribution_configs" add constraint "vault_distribution_configs_entity_id_fkey" FOREIGN KEY (entity_id) REFERENCES vault_entities(id) ON DELETE CASCADE not valid;

alter table "public"."vault_distribution_configs" validate constraint "vault_distribution_configs_entity_id_fkey";

grant delete on table "public"."vault_entities" to "anon";

grant insert on table "public"."vault_entities" to "anon";

grant references on table "public"."vault_entities" to "anon";

grant select on table "public"."vault_entities" to "anon";

grant trigger on table "public"."vault_entities" to "anon";

grant truncate on table "public"."vault_entities" to "anon";

grant update on table "public"."vault_entities" to "anon";

grant delete on table "public"."vault_entities" to "authenticated";

grant insert on table "public"."vault_entities" to "authenticated";

grant references on table "public"."vault_entities" to "authenticated";

grant select on table "public"."vault_entities" to "authenticated";

grant trigger on table "public"."vault_entities" to "authenticated";

grant truncate on table "public"."vault_entities" to "authenticated";

grant update on table "public"."vault_entities" to "authenticated";

grant delete on table "public"."vault_entities" to "service_role";

grant insert on table "public"."vault_entities" to "service_role";

grant references on table "public"."vault_entities" to "service_role";

grant select on table "public"."vault_entities" to "service_role";

grant trigger on table "public"."vault_entities" to "service_role";

grant truncate on table "public"."vault_entities" to "service_role";

grant update on table "public"."vault_entities" to "service_role";

create policy "Segregate vaults by tenants"
on "public"."vault_entities"
as permissive
for all
to public
using ((((((auth.jwt() -> 'app_metadata'::text) ->> 'partner_type'::text) IS NULL) AND (tenant IS NULL)) OR ((((auth.jwt() -> 'app_metadata'::text) ->> 'partner_type'::text) = 'channel'::text) AND (tenant = auth.uid()))))
with check ((((((auth.jwt() -> 'app_metadata'::text) ->> 'partner_type'::text) IS NULL) AND (tenant IS NULL)) OR ((((auth.jwt() -> 'app_metadata'::text) ->> 'partner_type'::text) = 'channel'::text) AND (tenant = auth.uid()))));



