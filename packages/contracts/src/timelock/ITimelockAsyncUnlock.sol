// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title ITimelockAsyncUnlock
 */
interface ITimelockAsyncUnlock {
    /**
     * @dev Requests unlock for multiple deposit periods and amounts
     *
     * @param owner The address of the token owner requesting the unlock
     * @param depositPeriods The IDs of the deposit periods for which tokens are being requested to unlock
     * @param amounts The amounts of tokens to unlock for each respective deposit period.
     *
     * @return requestId The ID of the unlock request and it can be used in unlock
     */
    function requestUnlock(address owner, uint256[] memory depositPeriods, uint256[] memory amounts)
        external
        returns (uint256 requestId);

    /**
     * @dev Unlocks amount using requestId
     *
     * @param owner The address of the token owner who made the unlock request
     * @param requestId The ID of the unlock request generated by `requestUnlock`
     *
     * @return depositPeriods The deposit periods of tokens that are unlocked
     * @return amounts The amounts of tokens for each respective deposit period that are unlocked
     */
    function unlock(address owner, uint256 requestId)
        external
        returns (uint256[] memory depositPeriods, uint256[] memory amounts);

    /**
     * @notice Cancel a pending request to unlock
     * @param owner Owner of the request
     * @param requestId Discriminator between non-fungible requests
     */
    function cancelRequestUnlock(address owner, uint256 requestId) external;

    /**
     * @dev Return notice period
     */
    function noticePeriod() external view returns (uint256 noticePeriod_);

    /**
     * @dev Return current time period and it should be implemented in child implementation
     */
    function currentPeriod() external view returns (uint256 currentPeriod_);

    /**
     * @dev Return the unlock period based on current time
     */
    function minUnlockPeriod() external view returns (uint256 minUnlockPeriod_);

    /**
     * @dev Return the owner's locked token amount
     * It is same as owner's multi token balance at depositPeriod by default
     */
    function lockedAmount(address owner, uint256 depositPeriod) external view returns (uint256 lockedAmount_);

    /**
     * @dev Return the token amount that was already requested to be unlocked for depositPeriod
     */
    function unlockRequestAmount(address owner, uint256 requestId) external view returns (uint256 amount_);

    /**
     * @dev Return the token amount that was already requested to be unlocked for depositPeriod
     */
    function unlockRequestAmountByDepositPeriod(address owner, uint256 depositPeriod)
        external
        view
        returns (uint256 amount);

    /**
     * @dev Returns the unlock requests by owner and request id
     *
     * @param owner The address of the token owner who made the unlock request.
     * @param requestId The ID of the unlock request.
     *
     * @return depositPeriods The depositPeriods that were requested to be unlocked
     * @return amounts The amounts that were requested to be unlocked
     */
    function unlockRequests(address owner, uint256 requestId)
        external
        view
        returns (uint256[] memory depositPeriods, uint256[] memory amounts);

    /**
     * @dev Return the amount of owner that can be requested to be unlocked for depositPeriod
     * This can be calculated simply by lockedAmount - unlockRequested
     */
    function maxRequestUnlock(address owner, uint256 depositPeriod) external view returns (uint256 maxRequestUnlock_);
}
