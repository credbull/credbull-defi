/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SafeERC20, SafeERC20Interface } from "../SafeERC20";

const _abi = [
  {
    type: "error",
    name: "SafeERC20FailedDecreaseAllowance",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "currentAllowance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "requestedDecrease",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "SafeERC20FailedOperation",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122068310392bcdcc324cf71691628f763a35aacde94771e8210541a14a458edf24c64736f6c63430008170033";

type SafeERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeERC20__factory extends ContractFactory {
  constructor(...args: SafeERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<SafeERC20> {
    return super.deploy(overrides || {}) as Promise<SafeERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SafeERC20 {
    return super.attach(address) as SafeERC20;
  }
  override connect(signer: Signer): SafeERC20__factory {
    return super.connect(signer) as SafeERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeERC20Interface {
    return new utils.Interface(_abi) as SafeERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeERC20 {
    return new Contract(address, _abi, signerOrProvider) as SafeERC20;
  }
}
